// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: storage.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	Register(ctx context.Context, in *Database, opts ...grpc.CallOption) (*StorageResponse, error)
	CreateTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*StorageResponse, error)
	DeleteTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*StorageResponse, error)
	InsertLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*StorageResponse, error)
	DeleteLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*StorageResponse, error)
	UpdateLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*StorageResponse, error)
	GetLine(ctx context.Context, in *GetLineRequest, opts ...grpc.CallOption) (*Line, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Register(ctx context.Context, in *Database, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/Storage/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/Storage/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/Storage/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) InsertLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/Storage/InsertLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/Storage/DeleteLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/Storage/UpdateLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetLine(ctx context.Context, in *GetLineRequest, opts ...grpc.CallOption) (*Line, error) {
	out := new(Line)
	err := c.cc.Invoke(ctx, "/Storage/GetLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	Register(context.Context, *Database) (*StorageResponse, error)
	CreateTable(context.Context, *Table) (*StorageResponse, error)
	DeleteTable(context.Context, *Table) (*StorageResponse, error)
	InsertLine(context.Context, *Line) (*StorageResponse, error)
	DeleteLine(context.Context, *Line) (*StorageResponse, error)
	UpdateLine(context.Context, *Line) (*StorageResponse, error)
	GetLine(context.Context, *GetLineRequest) (*Line, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) Register(context.Context, *Database) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStorageServer) CreateTable(context.Context, *Table) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedStorageServer) DeleteTable(context.Context, *Table) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedStorageServer) InsertLine(context.Context, *Line) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLine not implemented")
}
func (UnimplementedStorageServer) DeleteLine(context.Context, *Line) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLine not implemented")
}
func (UnimplementedStorageServer) UpdateLine(context.Context, *Line) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLine not implemented")
}
func (UnimplementedStorageServer) GetLine(context.Context, *GetLineRequest) (*Line, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLine not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Register(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Table)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateTable(ctx, req.(*Table))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Table)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteTable(ctx, req.(*Table))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_InsertLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).InsertLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/InsertLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).InsertLine(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/DeleteLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteLine(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/UpdateLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateLine(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/GetLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetLine(ctx, req.(*GetLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Storage_Register_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _Storage_CreateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _Storage_DeleteTable_Handler,
		},
		{
			MethodName: "InsertLine",
			Handler:    _Storage_InsertLine_Handler,
		},
		{
			MethodName: "DeleteLine",
			Handler:    _Storage_DeleteLine_Handler,
		},
		{
			MethodName: "UpdateLine",
			Handler:    _Storage_UpdateLine_Handler,
		},
		{
			MethodName: "GetLine",
			Handler:    _Storage_GetLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
